// Code generated by goctl. DO NOT EDIT.

package tRefund

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tRefundFieldNames          = builder.RawFieldNames(&TRefund{})
	tRefundRows                = strings.Join(tRefundFieldNames, ",")
	tRefundRowsExpectAutoSet   = strings.Join(stringx.Remove(tRefundFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tRefundRowsWithPlaceHolder = strings.Join(stringx.Remove(tRefundFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cache12306Pay0TRefundIdPrefix = "cache:12306Pay0:tRefund:id:"
)

type (
	tRefundModel interface {
		Insert(ctx context.Context, data *TRefund) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TRefund, error)
		Update(ctx context.Context, data *TRefund) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTRefundModel struct {
		sqlc.CachedConn
		table string
	}

	TRefund struct {
		Id            int64          `db:"id"`             // ID
		PaySn         sql.NullString `db:"pay_sn"`         // 支付流水号
		OrderSn       sql.NullString `db:"order_sn"`       // 订单号
		TradeNo       sql.NullString `db:"trade_no"`       // 三方交易凭证号
		Amount        sql.NullInt64  `db:"amount"`         // 退款金额
		UserId        sql.NullInt64  `db:"user_id"`        // 用户ID
		Username      sql.NullString `db:"username"`       // 用户名
		TrainId       sql.NullInt64  `db:"train_id"`       // 列车ID
		TrainNumber   sql.NullString `db:"train_number"`   // 列车车次
		RidingDate    sql.NullTime   `db:"riding_date"`    // 乘车日期
		Departure     sql.NullString `db:"departure"`      // 出发站点
		Arrival       sql.NullString `db:"arrival"`        // 到达站点
		DepartureTime sql.NullTime   `db:"departure_time"` // 出发时间
		ArrivalTime   sql.NullTime   `db:"arrival_time"`   // 到达时间
		SeatType      sql.NullInt64  `db:"seat_type"`      // 座位类型
		IdType        sql.NullInt64  `db:"id_type"`        // 证件类型
		IdCard        sql.NullString `db:"id_card"`        // 证件号
		RealName      sql.NullString `db:"real_name"`      // 真实姓名
		Status        sql.NullInt64  `db:"status"`         // 订单状态
		RefundTime    sql.NullTime   `db:"refund_time"`    // 退款时间
		CreateTime    sql.NullTime   `db:"create_time"`    // 创建时间
		UpdateTime    sql.NullTime   `db:"update_time"`    // 修改时间
		DelFlag       sql.NullInt64  `db:"del_flag"`       // 删除标记 0：未删除 1：删除
	}
)

func newTRefundModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTRefundModel {
	return &defaultTRefundModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_refund`",
	}
}

func (m *defaultTRefundModel) Delete(ctx context.Context, id int64) error {
	_12306Pay0TRefundIdKey := fmt.Sprintf("%s%v", cache12306Pay0TRefundIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, _12306Pay0TRefundIdKey)
	return err
}

func (m *defaultTRefundModel) FindOne(ctx context.Context, id int64) (*TRefund, error) {
	_12306Pay0TRefundIdKey := fmt.Sprintf("%s%v", cache12306Pay0TRefundIdPrefix, id)
	var resp TRefund
	err := m.QueryRowCtx(ctx, &resp, _12306Pay0TRefundIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tRefundRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTRefundModel) Insert(ctx context.Context, data *TRefund) (sql.Result, error) {
	_12306Pay0TRefundIdKey := fmt.Sprintf("%s%v", cache12306Pay0TRefundIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tRefundRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.PaySn, data.OrderSn, data.TradeNo, data.Amount, data.UserId, data.Username, data.TrainId, data.TrainNumber, data.RidingDate, data.Departure, data.Arrival, data.DepartureTime, data.ArrivalTime, data.SeatType, data.IdType, data.IdCard, data.RealName, data.Status, data.RefundTime, data.DelFlag)
	}, _12306Pay0TRefundIdKey)
	return ret, err
}

func (m *defaultTRefundModel) Update(ctx context.Context, data *TRefund) error {
	_12306Pay0TRefundIdKey := fmt.Sprintf("%s%v", cache12306Pay0TRefundIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tRefundRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.PaySn, data.OrderSn, data.TradeNo, data.Amount, data.UserId, data.Username, data.TrainId, data.TrainNumber, data.RidingDate, data.Departure, data.Arrival, data.DepartureTime, data.ArrivalTime, data.SeatType, data.IdType, data.IdCard, data.RealName, data.Status, data.RefundTime, data.DelFlag, data.Id)
	}, _12306Pay0TRefundIdKey)
	return err
}

func (m *defaultTRefundModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cache12306Pay0TRefundIdPrefix, primary)
}

func (m *defaultTRefundModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tRefundRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTRefundModel) tableName() string {
	return m.table
}
