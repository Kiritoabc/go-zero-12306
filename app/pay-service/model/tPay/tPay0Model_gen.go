// Code generated by goctl. DO NOT EDIT.

package tPay

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tPay0FieldNames          = builder.RawFieldNames(&TPay0{})
	tPay0Rows                = strings.Join(tPay0FieldNames, ",")
	tPay0RowsExpectAutoSet   = strings.Join(stringx.Remove(tPay0FieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tPay0RowsWithPlaceHolder = strings.Join(stringx.Remove(tPay0FieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cache12306Pay0TPay0IdPrefix = "cache:12306Pay0:tPay0:id:"
)

type (
	tPay0Model interface {
		Insert(ctx context.Context, data *TPay0) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TPay0, error)
		Update(ctx context.Context, data *TPay0) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTPay0Model struct {
		sqlc.CachedConn
		table string
	}

	TPay0 struct {
		Id             int64          `db:"id"`               // ID
		PaySn          sql.NullString `db:"pay_sn"`           // 支付流水号
		OrderSn        sql.NullString `db:"order_sn"`         // 订单号
		OutOrderSn     sql.NullString `db:"out_order_sn"`     // 商户订单号
		Channel        sql.NullString `db:"channel"`          // 支付渠道
		TradeType      sql.NullString `db:"trade_type"`       // 支付环境
		Subject        sql.NullString `db:"subject"`          // 订单标题
		OrderRequestId sql.NullString `db:"order_request_id"` // 商户订单号
		TotalAmount    sql.NullInt64  `db:"total_amount"`     // 交易总金额
		TradeNo        sql.NullString `db:"trade_no"`         // 三方交易凭证号
		GmtPayment     sql.NullTime   `db:"gmt_payment"`      // 付款时间
		PayAmount      sql.NullInt64  `db:"pay_amount"`       // 支付金额
		Status         sql.NullString `db:"status"`           // 支付状态
		CreateTime     sql.NullTime   `db:"create_time"`      // 创建时间
		UpdateTime     sql.NullTime   `db:"update_time"`      // 修改时间
		DelFlag        sql.NullInt64  `db:"del_flag"`         // 删除标记 0：未删除 1：删除
	}
)

func newTPay0Model(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTPay0Model {
	return &defaultTPay0Model{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_pay_0`",
	}
}

func (m *defaultTPay0Model) Delete(ctx context.Context, id int64) error {
	_12306Pay0TPay0IdKey := fmt.Sprintf("%s%v", cache12306Pay0TPay0IdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, _12306Pay0TPay0IdKey)
	return err
}

func (m *defaultTPay0Model) FindOne(ctx context.Context, id int64) (*TPay0, error) {
	_12306Pay0TPay0IdKey := fmt.Sprintf("%s%v", cache12306Pay0TPay0IdPrefix, id)
	var resp TPay0
	err := m.QueryRowCtx(ctx, &resp, _12306Pay0TPay0IdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tPay0Rows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTPay0Model) Insert(ctx context.Context, data *TPay0) (sql.Result, error) {
	_12306Pay0TPay0IdKey := fmt.Sprintf("%s%v", cache12306Pay0TPay0IdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tPay0RowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.PaySn, data.OrderSn, data.OutOrderSn, data.Channel, data.TradeType, data.Subject, data.OrderRequestId, data.TotalAmount, data.TradeNo, data.GmtPayment, data.PayAmount, data.Status, data.DelFlag)
	}, _12306Pay0TPay0IdKey)
	return ret, err
}

func (m *defaultTPay0Model) Update(ctx context.Context, data *TPay0) error {
	_12306Pay0TPay0IdKey := fmt.Sprintf("%s%v", cache12306Pay0TPay0IdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tPay0RowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.PaySn, data.OrderSn, data.OutOrderSn, data.Channel, data.TradeType, data.Subject, data.OrderRequestId, data.TotalAmount, data.TradeNo, data.GmtPayment, data.PayAmount, data.Status, data.DelFlag, data.Id)
	}, _12306Pay0TPay0IdKey)
	return err
}

func (m *defaultTPay0Model) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cache12306Pay0TPay0IdPrefix, primary)
}

func (m *defaultTPay0Model) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tPay0Rows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTPay0Model) tableName() string {
	return m.table
}
