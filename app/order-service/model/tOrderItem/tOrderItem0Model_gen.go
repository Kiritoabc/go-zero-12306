// Code generated by goctl. DO NOT EDIT.

package tOrderItem

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tOrderItem0FieldNames          = builder.RawFieldNames(&TOrderItem0{})
	tOrderItem0Rows                = strings.Join(tOrderItem0FieldNames, ",")
	tOrderItem0RowsExpectAutoSet   = strings.Join(stringx.Remove(tOrderItem0FieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tOrderItem0RowsWithPlaceHolder = strings.Join(stringx.Remove(tOrderItem0FieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cache12306Order0TOrderItem0IdPrefix = "cache:12306Order0:tOrderItem0:id:"
)

type (
	tOrderItem0Model interface {
		Insert(ctx context.Context, data *TOrderItem0) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TOrderItem0, error)
		Update(ctx context.Context, data *TOrderItem0) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTOrderItem0Model struct {
		sqlc.CachedConn
		table string
	}

	TOrderItem0 struct {
		Id             int64          `db:"id"`              // ID
		OrderSn        sql.NullString `db:"order_sn"`        // 订单号
		UserId         sql.NullInt64  `db:"user_id"`         // 用户ID
		Username       sql.NullString `db:"username"`        // 用户名
		TrainId        sql.NullInt64  `db:"train_id"`        // 列车ID
		CarriageNumber sql.NullString `db:"carriage_number"` // 车厢号
		SeatType       sql.NullInt64  `db:"seat_type"`       // 座位类型
		SeatNumber     sql.NullString `db:"seat_number"`     // 座位号
		RealName       sql.NullString `db:"real_name"`       // 真实姓名
		IdType         sql.NullInt64  `db:"id_type"`         // 证件类型
		IdCard         sql.NullString `db:"id_card"`         // 证件号
		TicketType     sql.NullInt64  `db:"ticket_type"`     // 车票类型
		Phone          sql.NullString `db:"phone"`           // 手机号
		Status         sql.NullInt64  `db:"status"`          // 订单状态
		Amount         sql.NullInt64  `db:"amount"`          // 订单金额
		CreateTime     sql.NullTime   `db:"create_time"`     // 创建时间
		UpdateTime     sql.NullTime   `db:"update_time"`     // 修改时间
		DelFlag        sql.NullInt64  `db:"del_flag"`        // 删除标识
	}
)

func newTOrderItem0Model(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTOrderItem0Model {
	return &defaultTOrderItem0Model{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_order_item_0`",
	}
}

func (m *defaultTOrderItem0Model) Delete(ctx context.Context, id int64) error {
	_12306Order0TOrderItem0IdKey := fmt.Sprintf("%s%v", cache12306Order0TOrderItem0IdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, _12306Order0TOrderItem0IdKey)
	return err
}

func (m *defaultTOrderItem0Model) FindOne(ctx context.Context, id int64) (*TOrderItem0, error) {
	_12306Order0TOrderItem0IdKey := fmt.Sprintf("%s%v", cache12306Order0TOrderItem0IdPrefix, id)
	var resp TOrderItem0
	err := m.QueryRowCtx(ctx, &resp, _12306Order0TOrderItem0IdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tOrderItem0Rows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTOrderItem0Model) Insert(ctx context.Context, data *TOrderItem0) (sql.Result, error) {
	_12306Order0TOrderItem0IdKey := fmt.Sprintf("%s%v", cache12306Order0TOrderItem0IdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tOrderItem0RowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderSn, data.UserId, data.Username, data.TrainId, data.CarriageNumber, data.SeatType, data.SeatNumber, data.RealName, data.IdType, data.IdCard, data.TicketType, data.Phone, data.Status, data.Amount, data.DelFlag)
	}, _12306Order0TOrderItem0IdKey)
	return ret, err
}

func (m *defaultTOrderItem0Model) Update(ctx context.Context, data *TOrderItem0) error {
	_12306Order0TOrderItem0IdKey := fmt.Sprintf("%s%v", cache12306Order0TOrderItem0IdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tOrderItem0RowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OrderSn, data.UserId, data.Username, data.TrainId, data.CarriageNumber, data.SeatType, data.SeatNumber, data.RealName, data.IdType, data.IdCard, data.TicketType, data.Phone, data.Status, data.Amount, data.DelFlag, data.Id)
	}, _12306Order0TOrderItem0IdKey)
	return err
}

func (m *defaultTOrderItem0Model) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cache12306Order0TOrderItem0IdPrefix, primary)
}

func (m *defaultTOrderItem0Model) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tOrderItem0Rows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTOrderItem0Model) tableName() string {
	return m.table
}
