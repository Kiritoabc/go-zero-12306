// Code generated by goctl. DO NOT EDIT.

package tRegion

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"go-zero-12306/common/globalkey"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tRegionFieldNames          = builder.RawFieldNames(&TRegion{})
	tRegionRows                = strings.Join(tRegionFieldNames, ",")
	tRegionRowsExpectAutoSet   = strings.Join(stringx.Remove(tRegionFieldNames, "`id`"), ",")
	tRegionRowsWithPlaceHolder = strings.Join(stringx.Remove(tRegionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cache12306TicketTRegionIdPrefix = "cache:12306Ticket:tRegion:id:"
)

type (
	tRegionModel interface {
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		FindAll(ctx context.Context, builder squirrel.SelectBuilder, orderBy string) ([]*TRegion, error)
		SelectListByInitialOrPopularFlag(ctx context.Context, builder squirrel.SelectBuilder, popularFlag int64, initialList []string) ([]*TRegion, error)
	}

	defaultTRegionModel struct {
		sqlc.CachedConn
		table string
	}

	TRegion struct {
		Id          int64          `db:"id"`           // ID
		Name        sql.NullString `db:"name"`         // 地区名称
		FullName    sql.NullString `db:"full_name"`    // 地区全名
		Code        sql.NullString `db:"code"`         // 地区编码
		Initial     sql.NullString `db:"initial"`      // 地区首字母
		Spell       sql.NullString `db:"spell"`        // 拼音
		PopularFlag sql.NullInt64  `db:"popular_flag"` // 热门标识
		CreateTime  sql.NullTime   `db:"create_time"`  // 创建时间
		UpdateTime  sql.NullTime   `db:"update_time"`  // 修改时间
		DelFlag     sql.NullInt64  `db:"del_flag"`     // 删除标识
	}
)

func newTRegionModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTRegionModel {
	return &defaultTRegionModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_region`",
	}
}

func (m *defaultTRegionModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cache12306TicketTRegionIdPrefix, primary)
}

func (m *defaultTRegionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tRegionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTRegionModel) tableName() string {
	return m.table
}

// 自定义
func (m *defaultTRegionModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}

func (m *defaultTRegionModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func (m *defaultTRegionModel) FindAll(ctx context.Context, builder squirrel.SelectBuilder, orderBy string) ([]*TRegion, error) {
	builder = builder.Columns(tRegionRows)
	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	query, values, err := builder.Where("del_flag = ?", globalkey.DelFlagNo).ToSql()
	if err != nil {
		return nil, err
	}
	var resp []*TRegion
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultTRegionModel) SelectListByInitialOrPopularFlag(ctx context.Context, builder squirrel.SelectBuilder, popularFlag int64, initialList []string) ([]*TRegion, error) {
	builder = builder.Columns(tRegionRows)
	builder = builder.Where("del_flag = ?", globalkey.DelFlagNo)
	if popularFlag == 1 {
		builder = builder.Where("popular_flag = ?", popularFlag)
	}
	query, value, err := builder.Where(squirrel.Eq{"initial": initialList}).ToSql()
	if err != nil {
		return nil, err
	}
	var resp []*TRegion
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, value...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}
