// Code generated by goctl. DO NOT EDIT.

package tTicket

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tTicketFieldNames          = builder.RawFieldNames(&TTicket{})
	tTicketRows                = strings.Join(tTicketFieldNames, ",")
	tTicketRowsExpectAutoSet   = strings.Join(stringx.Remove(tTicketFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tTicketRowsWithPlaceHolder = strings.Join(stringx.Remove(tTicketFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cache12306TicketTTicketIdPrefix = "cache:12306Ticket:tTicket:id:"
)

type (
	tTicketModel interface {
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
	}

	defaultTTicketModel struct {
		sqlc.CachedConn
		table string
	}

	TTicket struct {
		Id             int64          `db:"id"`              // ID
		Username       sql.NullString `db:"username"`        // 用户名
		TrainId        sql.NullInt64  `db:"train_id"`        // 列车ID
		CarriageNumber sql.NullString `db:"carriage_number"` // 车厢号
		SeatNumber     sql.NullString `db:"seat_number"`     // 座位号
		PassengerId    sql.NullInt64  `db:"passenger_id"`    // 乘车人ID
		TicketStatus   sql.NullInt64  `db:"ticket_status"`   // 车票状态
		CreateTime     sql.NullTime   `db:"create_time"`     // 创建时间
		UpdateTime     sql.NullTime   `db:"update_time"`     // 修改时间
		DelFlag        sql.NullInt64  `db:"del_flag"`        // 删除标识
	}
)

func newTTicketModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTTicketModel {
	return &defaultTTicketModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_ticket`",
	}
}

func (m *defaultTTicketModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cache12306TicketTTicketIdPrefix, primary)
}

func (m *defaultTTicketModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tTicketRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTTicketModel) tableName() string {
	return m.table
}

// 自定义
func (m *defaultTTicketModel) Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}
