// Code generated by goctl. DO NOT EDIT.

package tTrainStationRelation

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tTrainStationRelationFieldNames          = builder.RawFieldNames(&TTrainStationRelation{})
	tTrainStationRelationRows                = strings.Join(tTrainStationRelationFieldNames, ",")
	tTrainStationRelationRowsExpectAutoSet   = strings.Join(stringx.Remove(tTrainStationRelationFieldNames, "`id`"), ",")
	tTrainStationRelationRowsWithPlaceHolder = strings.Join(stringx.Remove(tTrainStationRelationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cache12306TicketTTrainStationRelationIdPrefix = "cache:12306Ticket:tTrainStationRelation:id:"
)

type (
	tTrainStationRelationModel interface {
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		SelectSratr2End(cxt context.Context, builder squirrel.SelectBuilder, startRegion string, endRegion string) ([]*TTrainStationRelation, error)
	}

	defaultTTrainStationRelationModel struct {
		sqlc.CachedConn
		table string
	}

	TTrainStationRelation struct {
		Id            int64          `db:"id"`             // ID
		TrainId       sql.NullInt64  `db:"train_id"`       // 车次ID
		Departure     sql.NullString `db:"departure"`      // 出发站点
		Arrival       sql.NullString `db:"arrival"`        // 到达站点
		StartRegion   sql.NullString `db:"start_region"`   // 起始城市名称
		EndRegion     sql.NullString `db:"end_region"`     // 终点城市名称
		DepartureFlag sql.NullInt64  `db:"departure_flag"` // 始发标识
		ArrivalFlag   sql.NullInt64  `db:"arrival_flag"`   // 终点标识
		DepartureTime sql.NullTime   `db:"departure_time"` // 出发时间
		ArrivalTime   sql.NullTime   `db:"arrival_time"`   // 到达时间
		CreateTime    sql.NullTime   `db:"create_time"`    // 创建时间
		UpdateTime    sql.NullTime   `db:"update_time"`    // 修改时间
		DelFlag       sql.NullInt64  `db:"del_flag"`       // 删除标识
	}
)

func newTTrainStationRelationModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTTrainStationRelationModel {
	return &defaultTTrainStationRelationModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_train_station_relation`",
	}
}

func (m *defaultTTrainStationRelationModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cache12306TicketTTrainStationRelationIdPrefix, primary)
}

func (m *defaultTTrainStationRelationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tTrainStationRelationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTTrainStationRelationModel) tableName() string {
	return m.table
}

// 自定义
func (m *defaultTTrainStationRelationModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}
func (m *defaultTTrainStationRelationModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func (m *defaultTTrainStationRelationModel) SelectSratr2End(ctx context.Context, builder squirrel.SelectBuilder, startRegion string, endRegion string) ([]*TTrainStationRelation, error) {
	builder = builder.Columns(tTrainStationRelationRows)
	query, value, err := builder.Where("start_region = ? and end_region = ?", startRegion, endRegion).ToSql()
	if err != nil {
		return nil, err
	}
	var resp []*TTrainStationRelation
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, value...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}
