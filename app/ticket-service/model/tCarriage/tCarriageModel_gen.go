// Code generated by goctl. DO NOT EDIT.

package tCarriage

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tCarriageFieldNames          = builder.RawFieldNames(&TCarriage{})
	tCarriageRows                = strings.Join(tCarriageFieldNames, ",")
	tCarriageRowsExpectAutoSet   = strings.Join(stringx.Remove(tCarriageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tCarriageRowsWithPlaceHolder = strings.Join(stringx.Remove(tCarriageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cache12306TicketTCarriageIdPrefix = "cache:12306Ticket:tCarriage:id:"
)

type (
	tCarriageModel interface {
		Insert(ctx context.Context, data *TCarriage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TCarriage, error)
		Update(ctx context.Context, data *TCarriage) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTCarriageModel struct {
		sqlc.CachedConn
		table string
	}

	TCarriage struct {
		Id             int64          `db:"id"`              // ID
		TrainId        sql.NullInt64  `db:"train_id"`        // 列车ID
		CarriageNumber sql.NullString `db:"carriage_number"` // 车厢号
		CarriageType   sql.NullInt64  `db:"carriage_type"`   // 车厢类型
		SeatCount      sql.NullInt64  `db:"seat_count"`      // 座位数
		CreateTime     sql.NullTime   `db:"create_time"`     // 创建时间
		UpdateTime     sql.NullTime   `db:"update_time"`     // 修改时间
		DelFlag        sql.NullInt64  `db:"del_flag"`        // 删除标识
	}
)

func newTCarriageModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTCarriageModel {
	return &defaultTCarriageModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_carriage`",
	}
}

func (m *defaultTCarriageModel) Delete(ctx context.Context, id int64) error {
	_12306TicketTCarriageIdKey := fmt.Sprintf("%s%v", cache12306TicketTCarriageIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, _12306TicketTCarriageIdKey)
	return err
}

func (m *defaultTCarriageModel) FindOne(ctx context.Context, id int64) (*TCarriage, error) {
	_12306TicketTCarriageIdKey := fmt.Sprintf("%s%v", cache12306TicketTCarriageIdPrefix, id)
	var resp TCarriage
	err := m.QueryRowCtx(ctx, &resp, _12306TicketTCarriageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tCarriageRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTCarriageModel) Insert(ctx context.Context, data *TCarriage) (sql.Result, error) {
	_12306TicketTCarriageIdKey := fmt.Sprintf("%s%v", cache12306TicketTCarriageIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, tCarriageRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TrainId, data.CarriageNumber, data.CarriageType, data.SeatCount, data.DelFlag)
	}, _12306TicketTCarriageIdKey)
	return ret, err
}

func (m *defaultTCarriageModel) Update(ctx context.Context, data *TCarriage) error {
	_12306TicketTCarriageIdKey := fmt.Sprintf("%s%v", cache12306TicketTCarriageIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tCarriageRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TrainId, data.CarriageNumber, data.CarriageType, data.SeatCount, data.DelFlag, data.Id)
	}, _12306TicketTCarriageIdKey)
	return err
}

func (m *defaultTCarriageModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cache12306TicketTCarriageIdPrefix, primary)
}

func (m *defaultTCarriageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tCarriageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTCarriageModel) tableName() string {
	return m.table
}
