// Code generated by goctl. DO NOT EDIT.

package tStation

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tStationFieldNames          = builder.RawFieldNames(&TStation{})
	tStationRows                = strings.Join(tStationFieldNames, ",")
	tStationRowsExpectAutoSet   = strings.Join(stringx.Remove(tStationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tStationRowsWithPlaceHolder = strings.Join(stringx.Remove(tStationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cache12306TicketTStationIdPrefix = "cache:12306Ticket:tStation:id:"
)

type (
	tStationModel interface {
		Insert(ctx context.Context, data *TStation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TStation, error)
		Update(ctx context.Context, data *TStation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTStationModel struct {
		sqlc.CachedConn
		table string
	}

	TStation struct {
		Id         int64          `db:"id"`          // ID
		Code       sql.NullString `db:"code"`        // 车站编号
		Name       sql.NullString `db:"name"`        // 车站名称
		Spell      sql.NullString `db:"spell"`       // 拼音
		Region     sql.NullString `db:"region"`      // 车站地区
		RegionName sql.NullString `db:"region_name"` // 车站地区名称
		CreateTime sql.NullTime   `db:"create_time"` // 创建时间
		UpdateTime sql.NullTime   `db:"update_time"` // 修改时间
		DelFlag    sql.NullInt64  `db:"del_flag"`    // 删除标识
	}
)

func newTStationModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTStationModel {
	return &defaultTStationModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_station`",
	}
}

func (m *defaultTStationModel) Delete(ctx context.Context, id int64) error {
	_12306TicketTStationIdKey := fmt.Sprintf("%s%v", cache12306TicketTStationIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, _12306TicketTStationIdKey)
	return err
}

func (m *defaultTStationModel) FindOne(ctx context.Context, id int64) (*TStation, error) {
	_12306TicketTStationIdKey := fmt.Sprintf("%s%v", cache12306TicketTStationIdPrefix, id)
	var resp TStation
	err := m.QueryRowCtx(ctx, &resp, _12306TicketTStationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tStationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTStationModel) Insert(ctx context.Context, data *TStation) (sql.Result, error) {
	_12306TicketTStationIdKey := fmt.Sprintf("%s%v", cache12306TicketTStationIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, tStationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Code, data.Name, data.Spell, data.Region, data.RegionName, data.DelFlag)
	}, _12306TicketTStationIdKey)
	return ret, err
}

func (m *defaultTStationModel) Update(ctx context.Context, data *TStation) error {
	_12306TicketTStationIdKey := fmt.Sprintf("%s%v", cache12306TicketTStationIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tStationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Code, data.Name, data.Spell, data.Region, data.RegionName, data.DelFlag, data.Id)
	}, _12306TicketTStationIdKey)
	return err
}

func (m *defaultTStationModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cache12306TicketTStationIdPrefix, primary)
}

func (m *defaultTStationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tStationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTStationModel) tableName() string {
	return m.table
}
