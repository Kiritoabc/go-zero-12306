// Code generated by goctl. DO NOT EDIT.

package tTrain

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tTrainFieldNames          = builder.RawFieldNames(&TTrain{})
	tTrainRows                = strings.Join(tTrainFieldNames, ",")
	tTrainRowsExpectAutoSet   = strings.Join(stringx.Remove(tTrainFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tTrainRowsWithPlaceHolder = strings.Join(stringx.Remove(tTrainFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cache12306TicketTTrainIdPrefix = "cache:12306Ticket:tTrain:id:"
)

type (
	tTrainModel interface {
		Insert(ctx context.Context, data *TTrain) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TTrain, error)
		Update(ctx context.Context, data *TTrain) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTTrainModel struct {
		sqlc.CachedConn
		table string
	}

	TTrain struct {
		Id            int64          `db:"id"`             // ID
		TrainNumber   sql.NullString `db:"train_number"`   // 列车车次
		TrainType     sql.NullInt64  `db:"train_type"`     // 列车类型 0：高铁 1：动车 2：普通车
		TrainTag      sql.NullString `db:"train_tag"`      // 列车标签 0：复兴号 1：智能动车组 2：静音车厢 3：支持选铺
		TrainBrand    sql.NullString `db:"train_brand"`    // 列车品牌 0：GC-高铁/城际 1：D-动车 2：Z-直达 3：T-特快 4：K-快速 5：其他 6：复兴号 7：智能动车组
		StartStation  sql.NullString `db:"start_station"`  // 起始站
		EndStation    sql.NullString `db:"end_station"`    // 终点站
		StartRegion   sql.NullString `db:"start_region"`   // 起始城市
		EndRegion     sql.NullString `db:"end_region"`     // 终点城市
		SaleTime      sql.NullTime   `db:"sale_time"`      // 销售时间
		SaleStatus    sql.NullInt64  `db:"sale_status"`    // 销售状态 0：可售 1：不可售 2：未知
		DepartureTime sql.NullTime   `db:"departure_time"` // 出发时间
		ArrivalTime   sql.NullTime   `db:"arrival_time"`   // 到达时间
		CreateTime    sql.NullTime   `db:"create_time"`    // 创建时间
		UpdateTime    sql.NullTime   `db:"update_time"`    // 修改时间
		DelFlag       sql.NullInt64  `db:"del_flag"`       // 删除标识
	}
)

func newTTrainModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTTrainModel {
	return &defaultTTrainModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_train`",
	}
}

func (m *defaultTTrainModel) Delete(ctx context.Context, id int64) error {
	_12306TicketTTrainIdKey := fmt.Sprintf("%s%v", cache12306TicketTTrainIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, _12306TicketTTrainIdKey)
	return err
}

func (m *defaultTTrainModel) FindOne(ctx context.Context, id int64) (*TTrain, error) {
	_12306TicketTTrainIdKey := fmt.Sprintf("%s%v", cache12306TicketTTrainIdPrefix, id)
	var resp TTrain
	err := m.QueryRowCtx(ctx, &resp, _12306TicketTTrainIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tTrainRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTTrainModel) Insert(ctx context.Context, data *TTrain) (sql.Result, error) {
	_12306TicketTTrainIdKey := fmt.Sprintf("%s%v", cache12306TicketTTrainIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tTrainRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TrainNumber, data.TrainType, data.TrainTag, data.TrainBrand, data.StartStation, data.EndStation, data.StartRegion, data.EndRegion, data.SaleTime, data.SaleStatus, data.DepartureTime, data.ArrivalTime, data.DelFlag)
	}, _12306TicketTTrainIdKey)
	return ret, err
}

func (m *defaultTTrainModel) Update(ctx context.Context, data *TTrain) error {
	_12306TicketTTrainIdKey := fmt.Sprintf("%s%v", cache12306TicketTTrainIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tTrainRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TrainNumber, data.TrainType, data.TrainTag, data.TrainBrand, data.StartStation, data.EndStation, data.StartRegion, data.EndRegion, data.SaleTime, data.SaleStatus, data.DepartureTime, data.ArrivalTime, data.DelFlag, data.Id)
	}, _12306TicketTTrainIdKey)
	return err
}

func (m *defaultTTrainModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cache12306TicketTTrainIdPrefix, primary)
}

func (m *defaultTTrainModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tTrainRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTTrainModel) tableName() string {
	return m.table
}
