// Code generated by goctl. DO NOT EDIT.

package tTrain

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"go-zero-12306/common/globalkey"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tTrainFieldNames          = builder.RawFieldNames(&TTrain{})
	tTrainRows                = strings.Join(tTrainFieldNames, ",")
	tTrainRowsExpectAutoSet   = strings.Join(stringx.Remove(tTrainFieldNames, "`id`"), ",")
	tTrainRowsWithPlaceHolder = strings.Join(stringx.Remove(tTrainFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cache12306TicketTTrainIdPrefix = "cache:12306Ticket:tTrain:id:"
)

type (
	tTrainModel interface {
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		FindPageListByPage(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, dateTime time.Time, orderBy string) ([]*TTrain, error)
	}

	defaultTTrainModel struct {
		sqlc.CachedConn
		table string
	}

	TTrain struct {
		Id            int64          `db:"id"`             // ID
		TrainNumber   sql.NullString `db:"train_number"`   // 列车车次
		TrainType     sql.NullInt64  `db:"train_type"`     // 列车类型 0：高铁 1：动车 2：普通车
		TrainTag      sql.NullString `db:"train_tag"`      // 列车标签 0：复兴号 1：智能动车组 2：静音车厢 3：支持选铺
		TrainBrand    sql.NullString `db:"train_brand"`    // 列车品牌 0：GC-高铁/城际 1：D-动车 2：Z-直达 3：T-特快 4：K-快速 5：其他 6：复兴号 7：智能动车组
		StartStation  sql.NullString `db:"start_station"`  // 起始站
		EndStation    sql.NullString `db:"end_station"`    // 终点站
		StartRegion   sql.NullString `db:"start_region"`   // 起始城市
		EndRegion     sql.NullString `db:"end_region"`     // 终点城市
		SaleTime      sql.NullTime   `db:"sale_time"`      // 销售时间
		SaleStatus    sql.NullInt64  `db:"sale_status"`    // 销售状态 0：可售 1：不可售 2：未知
		DepartureTime sql.NullTime   `db:"departure_time"` // 出发时间
		ArrivalTime   sql.NullTime   `db:"arrival_time"`   // 到达时间
		CreateTime    sql.NullTime   `db:"create_time"`    // 创建时间
		UpdateTime    sql.NullTime   `db:"update_time"`    // 修改时间
		DelFlag       sql.NullInt64  `db:"del_flag"`       // 删除标识
	}
)

func newTTrainModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTTrainModel {
	return &defaultTTrainModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_train`",
	}
}

func (m *defaultTTrainModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cache12306TicketTTrainIdPrefix, primary)
}

func (m *defaultTTrainModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tTrainRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTTrainModel) tableName() string {
	return m.table
}

// 自定义
func (m *defaultTTrainModel) Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}

func (m *defaultTTrainModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func (m *defaultTTrainModel) FindPageListByPage(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, dateTime time.Time, orderBy string) ([]*TTrain, error) {
	builder = builder.Columns(tTrainRows)
	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}
	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize
	query, values, err := builder.
		Where("del_flag = ? and departure_time > ? and departure_time < ? ", globalkey.DelFlagNo, dateTime, dateTime).
		Offset(uint64(offset)).
		Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}
	var resp []*TTrain
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}
