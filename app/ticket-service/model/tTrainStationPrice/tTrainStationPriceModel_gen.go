// Code generated by goctl. DO NOT EDIT.

package tTrainStationPrice

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tTrainStationPriceFieldNames          = builder.RawFieldNames(&TTrainStationPrice{})
	tTrainStationPriceRows                = strings.Join(tTrainStationPriceFieldNames, ",")
	tTrainStationPriceRowsExpectAutoSet   = strings.Join(stringx.Remove(tTrainStationPriceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tTrainStationPriceRowsWithPlaceHolder = strings.Join(stringx.Remove(tTrainStationPriceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cache12306TicketTTrainStationPriceIdPrefix = "cache:12306Ticket:tTrainStationPrice:id:"
)

type (
	tTrainStationPriceModel interface {
		// 自定义
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		SelectOne(ctx context.Context, builder squirrel.SelectBuilder) (*TTrainStationPrice, error)
	}

	defaultTTrainStationPriceModel struct {
		sqlc.CachedConn
		table string
	}

	TTrainStationPrice struct {
		Id         int64          `db:"id"`          // ID
		TrainId    sql.NullInt64  `db:"train_id"`    // 车次ID
		Departure  sql.NullString `db:"departure"`   // 出发站点
		Arrival    sql.NullString `db:"arrival"`     // 到达站点
		SeatType   sql.NullInt64  `db:"seat_type"`   // 座位类型
		Price      sql.NullInt64  `db:"price"`       // 车票价格
		CreateTime sql.NullTime   `db:"create_time"` // 创建时间
		UpdateTime sql.NullTime   `db:"update_time"` // 修改时间
		DelFlag    sql.NullInt64  `db:"del_flag"`    // 删除标识
	}
)

func newTTrainStationPriceModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTTrainStationPriceModel {
	return &defaultTTrainStationPriceModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_train_station_price`",
	}
}
func (m *defaultTTrainStationPriceModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cache12306TicketTTrainStationPriceIdPrefix, primary)
}

func (m *defaultTTrainStationPriceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tTrainStationPriceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTTrainStationPriceModel) tableName() string {
	return m.table
}

// 自定义
// 事务
func (m *defaultTTrainStationPriceModel) Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}

func (m *defaultTTrainStationPriceModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func (m *defaultTTrainStationPriceModel) SelectOne(ctx context.Context, builder squirrel.SelectBuilder) (*TTrainStationPrice, error) {
	builder = builder.Columns(tTrainStationPriceRows)

	query, values, err := builder.ToSql()
	if err != nil {
		return nil, err
	}
	var resp *TTrainStationPrice
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}
