// Code generated by goctl. DO NOT EDIT.

package tSeat

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tSeatFieldNames          = builder.RawFieldNames(&TSeat{})
	tSeatRows                = strings.Join(tSeatFieldNames, ",")
	tSeatRowsExpectAutoSet   = strings.Join(stringx.Remove(tSeatFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tSeatRowsWithPlaceHolder = strings.Join(stringx.Remove(tSeatFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cache12306TicketTSeatIdPrefix = "cache:12306Ticket:tSeat:id:"
)

type (
	tSeatModel interface {
		Insert(ctx context.Context, data *TSeat) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TSeat, error)
		Update(ctx context.Context, data *TSeat) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTSeatModel struct {
		sqlc.CachedConn
		table string
	}

	TSeat struct {
		Id             int64          `db:"id"`              // ID
		TrainId        sql.NullInt64  `db:"train_id"`        // 列车ID
		CarriageNumber sql.NullString `db:"carriage_number"` // 车厢号
		SeatNumber     sql.NullString `db:"seat_number"`     // 座位号
		SeatType       sql.NullInt64  `db:"seat_type"`       // 座位类型
		StartStation   sql.NullString `db:"start_station"`   // 起始站
		EndStation     sql.NullString `db:"end_station"`     // 终点站
		Price          sql.NullInt64  `db:"price"`           // 车票价格
		SeatStatus     sql.NullInt64  `db:"seat_status"`     // 座位状态
		CreateTime     sql.NullTime   `db:"create_time"`     // 创建时间
		UpdateTime     sql.NullTime   `db:"update_time"`     // 修改时间
		DelFlag        sql.NullInt64  `db:"del_flag"`        // 删除标识
	}
)

func newTSeatModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTSeatModel {
	return &defaultTSeatModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_seat`",
	}
}

func (m *defaultTSeatModel) Delete(ctx context.Context, id int64) error {
	_12306TicketTSeatIdKey := fmt.Sprintf("%s%v", cache12306TicketTSeatIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, _12306TicketTSeatIdKey)
	return err
}

func (m *defaultTSeatModel) FindOne(ctx context.Context, id int64) (*TSeat, error) {
	_12306TicketTSeatIdKey := fmt.Sprintf("%s%v", cache12306TicketTSeatIdPrefix, id)
	var resp TSeat
	err := m.QueryRowCtx(ctx, &resp, _12306TicketTSeatIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tSeatRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSeatModel) Insert(ctx context.Context, data *TSeat) (sql.Result, error) {
	_12306TicketTSeatIdKey := fmt.Sprintf("%s%v", cache12306TicketTSeatIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tSeatRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TrainId, data.CarriageNumber, data.SeatNumber, data.SeatType, data.StartStation, data.EndStation, data.Price, data.SeatStatus, data.DelFlag)
	}, _12306TicketTSeatIdKey)
	return ret, err
}

func (m *defaultTSeatModel) Update(ctx context.Context, data *TSeat) error {
	_12306TicketTSeatIdKey := fmt.Sprintf("%s%v", cache12306TicketTSeatIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tSeatRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TrainId, data.CarriageNumber, data.SeatNumber, data.SeatType, data.StartStation, data.EndStation, data.Price, data.SeatStatus, data.DelFlag, data.Id)
	}, _12306TicketTSeatIdKey)
	return err
}

func (m *defaultTSeatModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cache12306TicketTSeatIdPrefix, primary)
}

func (m *defaultTSeatModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tSeatRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTSeatModel) tableName() string {
	return m.table
}
