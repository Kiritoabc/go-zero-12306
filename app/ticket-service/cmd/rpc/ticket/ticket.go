// Code generated by goctl. DO NOT EDIT.
// Source: ticket.proto

package ticket

import (
	"context"

	"go-zero-12306/app/ticket-service/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CancelTicketOrderReq             = pb.CancelTicketOrderReq
	CancelTicketOrderResp            = pb.CancelTicketOrderResp
	CommonTicketRefundReq            = pb.CommonTicketRefundReq
	CommonTicketRefundResp           = pb.CommonTicketRefundResp
	GetPayInfoReq                    = pb.GetPayInfoReq
	GetPayInfoResp                   = pb.GetPayInfoResp
	ListAllStationReq                = pb.ListAllStationReq
	ListAllStationResp               = pb.ListAllStationResp
	ListRegionStationReq             = pb.ListRegionStationReq
	ListRegionStationResp            = pb.ListRegionStationResp
	ListTrainStationQueryReq         = pb.ListTrainStationQueryReq
	ListTrainStationQueryResp        = pb.ListTrainStationQueryResp
	PageListTicketQueryReq           = pb.PageListTicketQueryReq
	PageListTicketQueryResp          = pb.PageListTicketQueryResp
	PurchaseTicketPassengerDetailDTO = pb.PurchaseTicketPassengerDetailDTO
	PurchaseTicketsReq               = pb.PurchaseTicketsReq
	PurchaseTicketsResp              = pb.PurchaseTicketsResp
	RegionStationQueryRespDTO        = pb.RegionStationQueryRespDTO
	RegionTrainStationJobReq         = pb.RegionTrainStationJobReq
	RegionTrainStationJobResp        = pb.RegionTrainStationJobResp
	SeatClassDTO                     = pb.SeatClassDTO
	StationQueryRespDTO              = pb.StationQueryRespDTO
	TicketListDTO                    = pb.TicketListDTO
	TicketOrderDetailRespDTO         = pb.TicketOrderDetailRespDTO
	TrainStationDetailJobReq         = pb.TrainStationDetailJobReq
	TrainStationDetailJobResp        = pb.TrainStationDetailJobResp
	TrainStationQueryRespDTO         = pb.TrainStationQueryRespDTO

	Ticket interface {
		//
		ListTrainStationQuery(ctx context.Context, in *ListTrainStationQueryReq, opts ...grpc.CallOption) (*ListTrainStationQueryResp, error)
		ListRegionStation(ctx context.Context, in *ListRegionStationReq, opts ...grpc.CallOption) (*ListRegionStationResp, error)
		ListAllStation(ctx context.Context, in *ListAllStationReq, opts ...grpc.CallOption) (*ListAllStationResp, error)
		RegionTrainStationJob(ctx context.Context, in *RegionTrainStationJobReq, opts ...grpc.CallOption) (*RegionTrainStationJobResp, error)
		TrainStationDetailJob(ctx context.Context, in *TrainStationDetailJobReq, opts ...grpc.CallOption) (*TrainStationDetailJobResp, error)
		// TODO: TicketControllerRpc
		PageListTicketQuery(ctx context.Context, in *PageListTicketQueryReq, opts ...grpc.CallOption) (*PageListTicketQueryResp, error)
		PurchaseTickets(ctx context.Context, in *PurchaseTicketsReq, opts ...grpc.CallOption) (*PurchaseTicketsResp, error)
		PurchaseTicketsV2(ctx context.Context, in *PurchaseTicketsReq, opts ...grpc.CallOption) (*PurchaseTicketsResp, error)
		CancelTicketOrder(ctx context.Context, in *CancelTicketOrderReq, opts ...grpc.CallOption) (*CancelTicketOrderResp, error)
		GetPayInfo(ctx context.Context, in *GetPayInfoReq, opts ...grpc.CallOption) (*GetPayInfoResp, error)
		CommonTicketRefund(ctx context.Context, in *CommonTicketRefundReq, opts ...grpc.CallOption) (*CommonTicketRefundResp, error)
	}

	defaultTicket struct {
		cli zrpc.Client
	}
)

func NewTicket(cli zrpc.Client) Ticket {
	return &defaultTicket{
		cli: cli,
	}
}

func (m *defaultTicket) ListTrainStationQuery(ctx context.Context, in *ListTrainStationQueryReq, opts ...grpc.CallOption) (*ListTrainStationQueryResp, error) {
	client := pb.NewTicketClient(m.cli.Conn())
	return client.ListTrainStationQuery(ctx, in, opts...)
}

func (m *defaultTicket) ListRegionStation(ctx context.Context, in *ListRegionStationReq, opts ...grpc.CallOption) (*ListRegionStationResp, error) {
	client := pb.NewTicketClient(m.cli.Conn())
	return client.ListRegionStation(ctx, in, opts...)
}

func (m *defaultTicket) ListAllStation(ctx context.Context, in *ListAllStationReq, opts ...grpc.CallOption) (*ListAllStationResp, error) {
	client := pb.NewTicketClient(m.cli.Conn())
	return client.ListAllStation(ctx, in, opts...)
}

func (m *defaultTicket) RegionTrainStationJob(ctx context.Context, in *RegionTrainStationJobReq, opts ...grpc.CallOption) (*RegionTrainStationJobResp, error) {
	client := pb.NewTicketClient(m.cli.Conn())
	return client.RegionTrainStationJob(ctx, in, opts...)
}

func (m *defaultTicket) TrainStationDetailJob(ctx context.Context, in *TrainStationDetailJobReq, opts ...grpc.CallOption) (*TrainStationDetailJobResp, error) {
	client := pb.NewTicketClient(m.cli.Conn())
	return client.TrainStationDetailJob(ctx, in, opts...)
}

// TODO: TicketControllerRpc
func (m *defaultTicket) PageListTicketQuery(ctx context.Context, in *PageListTicketQueryReq, opts ...grpc.CallOption) (*PageListTicketQueryResp, error) {
	client := pb.NewTicketClient(m.cli.Conn())
	return client.PageListTicketQuery(ctx, in, opts...)
}

func (m *defaultTicket) PurchaseTickets(ctx context.Context, in *PurchaseTicketsReq, opts ...grpc.CallOption) (*PurchaseTicketsResp, error) {
	client := pb.NewTicketClient(m.cli.Conn())
	return client.PurchaseTickets(ctx, in, opts...)
}

func (m *defaultTicket) PurchaseTicketsV2(ctx context.Context, in *PurchaseTicketsReq, opts ...grpc.CallOption) (*PurchaseTicketsResp, error) {
	client := pb.NewTicketClient(m.cli.Conn())
	return client.PurchaseTicketsV2(ctx, in, opts...)
}

func (m *defaultTicket) CancelTicketOrder(ctx context.Context, in *CancelTicketOrderReq, opts ...grpc.CallOption) (*CancelTicketOrderResp, error) {
	client := pb.NewTicketClient(m.cli.Conn())
	return client.CancelTicketOrder(ctx, in, opts...)
}

func (m *defaultTicket) GetPayInfo(ctx context.Context, in *GetPayInfoReq, opts ...grpc.CallOption) (*GetPayInfoResp, error) {
	client := pb.NewTicketClient(m.cli.Conn())
	return client.GetPayInfo(ctx, in, opts...)
}

func (m *defaultTicket) CommonTicketRefund(ctx context.Context, in *CommonTicketRefundReq, opts ...grpc.CallOption) (*CommonTicketRefundResp, error) {
	client := pb.NewTicketClient(m.cli.Conn())
	return client.CommonTicketRefund(ctx, in, opts...)
}
