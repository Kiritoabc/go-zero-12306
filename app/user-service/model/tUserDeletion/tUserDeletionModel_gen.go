// Code generated by goctl. DO NOT EDIT.

package tUserDeletion

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tUserDeletionFieldNames          = builder.RawFieldNames(&TUserDeletion{})
	tUserDeletionRows                = strings.Join(tUserDeletionFieldNames, ",")
	tUserDeletionRowsExpectAutoSet   = strings.Join(stringx.Remove(tUserDeletionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tUserDeletionRowsWithPlaceHolder = strings.Join(stringx.Remove(tUserDeletionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cache12306User0TUserDeletionIdPrefix = "cache:12306User0:tUserDeletion:id:"
)

type (
	tUserDeletionModel interface {
		Insert(ctx context.Context, data *TUserDeletion) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TUserDeletion, error)
		Update(ctx context.Context, data *TUserDeletion) error
		Delete(ctx context.Context, id int64) error
		InsertWithSession(ctx context.Context, session sqlx.Session, data *TUserDeletion) (sql.Result, error)
	}

	defaultTUserDeletionModel struct {
		sqlc.CachedConn
		table string
	}

	TUserDeletion struct {
		Id         int64     `db:"id"`          // ID
		IdType     int64     `db:"id_type"`     // 证件类型
		IdCard     string    `db:"id_card"`     // 证件号
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 修改时间
		DelFlag    int64     `db:"del_flag"`    // 删除标识
	}
)

func newTUserDeletionModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTUserDeletionModel {
	return &defaultTUserDeletionModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_user_deletion`",
	}
}

func (m *defaultTUserDeletionModel) Delete(ctx context.Context, id int64) error {
	_12306User0TUserDeletionIdKey := fmt.Sprintf("%s%v", cache12306User0TUserDeletionIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, _12306User0TUserDeletionIdKey)
	return err
}

func (m *defaultTUserDeletionModel) FindOne(ctx context.Context, id int64) (*TUserDeletion, error) {
	_12306User0TUserDeletionIdKey := fmt.Sprintf("%s%v", cache12306User0TUserDeletionIdPrefix, id)
	var resp TUserDeletion
	err := m.QueryRowCtx(ctx, &resp, _12306User0TUserDeletionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tUserDeletionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlc.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTUserDeletionModel) Insert(ctx context.Context, data *TUserDeletion) (sql.Result, error) {
	_12306User0TUserDeletionIdKey := fmt.Sprintf("%s%v", cache12306User0TUserDeletionIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, tUserDeletionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.IdType, data.IdCard, data.DelFlag)
	}, _12306User0TUserDeletionIdKey)
	return ret, err
}

func (m *defaultTUserDeletionModel) Update(ctx context.Context, data *TUserDeletion) error {
	_12306User0TUserDeletionIdKey := fmt.Sprintf("%s%v", cache12306User0TUserDeletionIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tUserDeletionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.IdType, data.IdCard, data.DelFlag, data.Id)
	}, _12306User0TUserDeletionIdKey)
	return err
}

func (m *defaultTUserDeletionModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cache12306User0TUserDeletionIdPrefix, primary)
}

func (m *defaultTUserDeletionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tUserDeletionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTUserDeletionModel) tableName() string {
	return m.table
}

// 自定义
func (m *defaultTUserDeletionModel) InsertWithSession(ctx context.Context, session sqlx.Session, data *TUserDeletion) (sql.Result, error) {
	_12306User0TUserDeletionIdKey := fmt.Sprintf("%s%v", cache12306User0TUserDeletionIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, tUserDeletionRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.IdType, data.IdCard, data.DelFlag)
		}
		return conn.ExecCtx(ctx, query, data.IdType, data.IdCard, data.DelFlag)
	}, _12306User0TUserDeletionIdKey)
	return ret, err
}
