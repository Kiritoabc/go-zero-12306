// Code generated by goctl. DO NOT EDIT.

package tPassenger

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"strings"
	"time"
)

var (
	tPassenger0FieldNames          = builder.RawFieldNames(&TPassenger0{})
	tPassenger0Rows                = strings.Join(tPassenger0FieldNames, ",")
	tPassenger0RowsExpectAutoSet   = strings.Join(stringx.Remove(tPassenger0FieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tPassenger0RowsWithPlaceHolder = strings.Join(stringx.Remove(tPassenger0FieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cache12306User0TPassenger0IdPrefix       = "cache:12306User0:tPassenger0:id:"
	cache12306User0TPassenger0UsernamePrefix = "cache:12306User0:tPassenger0:username:"
)

type (
	tPassenger0Model interface {
		Insert(ctx context.Context, data *TPassenger0) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TPassenger0, error)
		Update(ctx context.Context, data *TPassenger0) error
		Delete(ctx context.Context, id int64) error
		GetPassengerByUserName(ctx context.Context, username string) ([]*TPassenger0, error)
		SelectBuilder() squirrel.SelectBuilder
	}

	defaultTPassenger0Model struct {
		sqlc.CachedConn
		table string
	}

	TPassenger0 struct {
		Id           int64     `db:"id"`            // ID
		Username     string    `db:"username"`      // 用户名
		RealName     string    `db:"real_name"`     // 真实姓名
		IdType       int64     `db:"id_type"`       // 证件类型
		IdCard       string    `db:"id_card"`       // 证件号码
		DiscountType int64     `db:"discount_type"` // 优惠类型
		Phone        string    `db:"phone"`         // 手机号
		CreateDate   time.Time `db:"create_date"`   // 添加日期
		VerifyStatus int64     `db:"verify_status"` // 审核状态
		CreateTime   time.Time `db:"create_time"`   // 创建时间
		UpdateTime   time.Time `db:"update_time"`   // 修改时间
		DelFlag      int64     `db:"del_flag"`      // 删除标识
	}
)

func newTPassenger0Model(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTPassenger0Model {
	return &defaultTPassenger0Model{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_passenger_0`",
	}
}

func (m *defaultTPassenger0Model) Delete(ctx context.Context, id int64) error {
	_12306User0TPassenger0IdKey := fmt.Sprintf("%s%v", cache12306User0TPassenger0IdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, _12306User0TPassenger0IdKey)
	return err
}

func (m *defaultTPassenger0Model) FindOne(ctx context.Context, id int64) (*TPassenger0, error) {
	_12306User0TPassenger0IdKey := fmt.Sprintf("%s%v", cache12306User0TPassenger0IdPrefix, id)
	var resp TPassenger0
	err := m.QueryRowCtx(ctx, &resp, _12306User0TPassenger0IdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tPassenger0Rows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTPassenger0Model) Insert(ctx context.Context, data *TPassenger0) (sql.Result, error) {
	_12306User0TPassenger0IdKey := fmt.Sprintf("%s%v", cache12306User0TPassenger0IdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tPassenger0RowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.RealName, data.IdType, data.IdCard, data.DiscountType, data.Phone, data.CreateDate, data.VerifyStatus, data.DelFlag)
	}, _12306User0TPassenger0IdKey)
	return ret, err
}

func (m *defaultTPassenger0Model) Update(ctx context.Context, data *TPassenger0) error {
	_12306User0TPassenger0IdKey := fmt.Sprintf("%s%v", cache12306User0TPassenger0IdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tPassenger0RowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Username, data.RealName, data.IdType, data.IdCard, data.DiscountType, data.Phone, data.CreateDate, data.VerifyStatus, data.DelFlag, data.Id)
	}, _12306User0TPassenger0IdKey)
	return err
}

func (m *defaultTPassenger0Model) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cache12306User0TPassenger0IdPrefix, primary)
}

func (m *defaultTPassenger0Model) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tPassenger0Rows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTPassenger0Model) tableName() string {
	return m.table
}

// 自定义
func (m *defaultTPassenger0Model) GetPassengerByUserName(ctx context.Context, username string) ([]*TPassenger0, error) {
	var resp []*TPassenger0
	_12306User0TPassenger0UsernameKey := fmt.Sprintf("%S%v", cache12306User0TPassenger0UsernamePrefix, username)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("select %s from %s where `username` = ?", tPassenger0Rows, m.table)
		return nil, conn.QueryRowsCtx(ctx, &resp, query, username)
	}, _12306User0TPassenger0UsernameKey)
	return resp, err
}

func (m *defaultTPassenger0Model) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}
