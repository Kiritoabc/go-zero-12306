// Code generated by goctl. DO NOT EDIT.

package tUserPhone

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tUserPhone0FieldNames          = builder.RawFieldNames(&TUserPhone0{})
	tUserPhone0Rows                = strings.Join(tUserPhone0FieldNames, ",")
	tUserPhone0RowsExpectAutoSet   = strings.Join(stringx.Remove(tUserPhone0FieldNames, "`id`", "`created_at`", "`update_at`", "`updated_at`", "`deletion_time`"), ",")
	tUserPhone0RowsWithPlaceHolder = strings.Join(stringx.Remove(tUserPhone0FieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cache12306User0TUserPhone0IdPrefix                = "cache:12306User0:tUserPhone0:id:"
	cache12306User0TUserPhone0PhoneDeletionTimePrefix = "cache:12306User0:tUserPhone0:phone:deletionTime:"
	cache12306User0TUserPhone0PhonePrefix             = "cache:12306User0:tUserPhone0:phone:"
)

type (
	tUserPhone0Model interface {
		Insert(ctx context.Context, sesson sqlx.Session, data *TUserPhone0) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TUserPhone0, error)
		FindOneByPhoneDeletionTime(ctx context.Context, phone string, deletionTime int64) (*TUserPhone0, error)
		Update(ctx context.Context, data *TUserPhone0) error
		Delete(ctx context.Context, id int64) error
		FindOneByPhone(ctx context.Context, phone string) (*TUserPhone0, error)
	}

	defaultTUserPhone0Model struct {
		sqlc.CachedConn
		table string
	}

	TUserPhone0 struct {
		Id           int64     `db:"id"`            // ID
		Username     string    `db:"username"`      // 用户名
		Phone        string    `db:"phone"`         // 手机号
		DeletionTime int64     `db:"deletion_time"` // 注销时间戳
		CreateTime   time.Time `db:"create_time"`   // 创建时间
		UpdateTime   time.Time `db:"update_time"`   // 修改时间
		DelFlag      int64     `db:"del_flag"`      // 删除标识
	}
)

func newTUserPhone0Model(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTUserPhone0Model {
	return &defaultTUserPhone0Model{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_user_phone_0`",
	}
}

func (m *defaultTUserPhone0Model) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	_12306User0TUserPhone0IdKey := fmt.Sprintf("%s%v", cache12306User0TUserPhone0IdPrefix, id)
	_12306User0TUserPhone0PhoneDeletionTimeKey := fmt.Sprintf("%s%v:%v", cache12306User0TUserPhone0PhoneDeletionTimePrefix, data.Phone, data.DeletionTime)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, _12306User0TUserPhone0IdKey, _12306User0TUserPhone0PhoneDeletionTimeKey)
	return err
}

func (m *defaultTUserPhone0Model) FindOne(ctx context.Context, id int64) (*TUserPhone0, error) {
	_12306User0TUserPhone0IdKey := fmt.Sprintf("%s%v", cache12306User0TUserPhone0IdPrefix, id)
	var resp TUserPhone0
	err := m.QueryRowCtx(ctx, &resp, _12306User0TUserPhone0IdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tUserPhone0Rows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTUserPhone0Model) FindOneByPhoneDeletionTime(ctx context.Context, phone string, deletionTime int64) (*TUserPhone0, error) {
	_12306User0TUserPhone0PhoneDeletionTimeKey := fmt.Sprintf("%s%v:%v", cache12306User0TUserPhone0PhoneDeletionTimePrefix, phone, deletionTime)
	var resp TUserPhone0
	err := m.QueryRowIndexCtx(ctx, &resp, _12306User0TUserPhone0PhoneDeletionTimeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `phone` = ? and `deletion_time` = ? limit 1", tUserPhone0Rows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, phone, deletionTime); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTUserPhone0Model) Insert(ctx context.Context, sesson sqlx.Session, data *TUserPhone0) (sql.Result, error) {
	_12306User0TUserPhone0IdKey := fmt.Sprintf("%s%v", cache12306User0TUserPhone0IdPrefix, data.Id)
	_12306User0TUserPhone0PhoneDeletionTimeKey := fmt.Sprintf("%s%v:%v", cache12306User0TUserPhone0PhoneDeletionTimePrefix, data.Phone, data.DeletionTime)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?,?,?)", m.table, tUserPhone0Rows)
		if sesson != nil {
			return sesson.ExecCtx(ctx, query, data.Username, data.Phone, data.DeletionTime, data.DelFlag, time.Now(), time.Now())
		}
		return conn.ExecCtx(ctx, query, data.Username, data.Phone, data.DeletionTime, data.DelFlag, time.Now(), time.Now())
	}, _12306User0TUserPhone0IdKey, _12306User0TUserPhone0PhoneDeletionTimeKey)
	return ret, err
}

func (m *defaultTUserPhone0Model) Update(ctx context.Context, newData *TUserPhone0) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	_12306User0TUserPhone0IdKey := fmt.Sprintf("%s%v", cache12306User0TUserPhone0IdPrefix, data.Id)
	_12306User0TUserPhone0PhoneDeletionTimeKey := fmt.Sprintf("%s%v:%v", cache12306User0TUserPhone0PhoneDeletionTimePrefix, data.Phone, data.DeletionTime)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tUserPhone0RowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Username, newData.Phone, newData.DeletionTime, newData.DelFlag, newData.Id)
	}, _12306User0TUserPhone0IdKey, _12306User0TUserPhone0PhoneDeletionTimeKey)
	return err
}

func (m *defaultTUserPhone0Model) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cache12306User0TUserPhone0IdPrefix, primary)
}

func (m *defaultTUserPhone0Model) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tUserPhone0Rows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTUserPhone0Model) tableName() string {
	return m.table
}

// 自定义
func (m *defaultTUserPhone0Model) FindOneByPhone(ctx context.Context, phone string) (*TUserPhone0, error) {
	_12306User0TUserPhone0PhoneKey := fmt.Sprintf("%s%v", cache12306User0TUserPhone0PhonePrefix, phone)
	var resp TUserPhone0
	err := m.QueryRowIndexCtx(ctx, &resp, _12306User0TUserPhone0PhoneKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", tUserPhone0Rows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, phone); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
