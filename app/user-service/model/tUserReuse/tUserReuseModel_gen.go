// Code generated by goctl. DO NOT EDIT.

package tUserReuse

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tUserReuseFieldNames          = builder.RawFieldNames(&TUserReuse{})
	tUserReuseRows                = strings.Join(tUserReuseFieldNames, ",")
	tUserReuseRowsExpectAutoSet   = strings.Join(stringx.Remove(tUserReuseFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tUserReuseRowsWithPlaceHolder = strings.Join(stringx.Remove(tUserReuseFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cache12306User0TUserReuseIdPrefix       = "cache:12306User0:tUserReuse:id:"
	cache12306User0TUserReuseUserNamePrefix = "cache:12306User0:tUserReuse:username:"
)

type (
	tUserReuseModel interface {
		Insert(ctx context.Context, data *TUserReuse) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TUserReuse, error)
		Update(ctx context.Context, data *TUserReuse) error
		Delete(ctx context.Context, id int64) error
		DeleteByUserName(ctx context.Context, session sqlx.Session, username string) error
	}

	defaultTUserReuseModel struct {
		sqlc.CachedConn
		table string
	}

	TUserReuse struct {
		Id         int64     `db:"id"`          // ID
		Username   string    `db:"username"`    // 用户名
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 修改时间
		DelFlag    int64     `db:"del_flag"`    // 删除标识
	}
)

func newTUserReuseModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTUserReuseModel {
	return &defaultTUserReuseModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_user_reuse`",
	}
}

// 更具用户名删除
func (m *defaultTUserReuseModel) DeleteByUserName(ctx context.Context, session sqlx.Session, username string) error {
	_12306User0TUserReuseUserNamePrefix := fmt.Sprintf("%s%s", cache12306User0TUserReuseUserNamePrefix, username)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (sql.Result, error) {
		query := fmt.Sprintf("delete from %s where username = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, username)
		}
		return conn.ExecCtx(ctx, query, username)
	}, _12306User0TUserReuseUserNamePrefix)
	return err
}

func (m *defaultTUserReuseModel) Delete(ctx context.Context, id int64) error {
	_12306User0TUserReuseIdKey := fmt.Sprintf("%s%v", cache12306User0TUserReuseIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, _12306User0TUserReuseIdKey)
	return err
}

func (m *defaultTUserReuseModel) FindOne(ctx context.Context, id int64) (*TUserReuse, error) {
	_12306User0TUserReuseIdKey := fmt.Sprintf("%s%v", cache12306User0TUserReuseIdPrefix, id)
	var resp TUserReuse
	err := m.QueryRowCtx(ctx, &resp, _12306User0TUserReuseIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tUserReuseRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTUserReuseModel) Insert(ctx context.Context, data *TUserReuse) (sql.Result, error) {
	_12306User0TUserReuseIdKey := fmt.Sprintf("%s%v", cache12306User0TUserReuseIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, tUserReuseRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.DelFlag)
	}, _12306User0TUserReuseIdKey)
	return ret, err
}

func (m *defaultTUserReuseModel) Update(ctx context.Context, data *TUserReuse) error {
	_12306User0TUserReuseIdKey := fmt.Sprintf("%s%v", cache12306User0TUserReuseIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tUserReuseRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Username, data.DelFlag, data.Id)
	}, _12306User0TUserReuseIdKey)
	return err
}

func (m *defaultTUserReuseModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cache12306User0TUserReuseIdPrefix, primary)
}

func (m *defaultTUserReuseModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tUserReuseRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTUserReuseModel) tableName() string {
	return m.table
}
