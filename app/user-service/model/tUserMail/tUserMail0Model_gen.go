// Code generated by goctl. DO NOT EDIT.

package tUserMail

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tUserMail0FieldNames          = builder.RawFieldNames(&TUserMail0{})
	tUserMail0Rows                = strings.Join(tUserMail0FieldNames, ",")
	tUserMail0RowsExpectAutoSet   = strings.Join(stringx.Remove(tUserMail0FieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tUserMail0RowsWithPlaceHolder = strings.Join(stringx.Remove(tUserMail0FieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cache12306User0TUserMail0IdPrefix               = "cache:12306User0:tUserMail0:id:"
	cache12306User0TUserMail0MailDeletionTimePrefix = "cache:12306User0:tUserMail0:mail:deletionTime:"
)

type (
	tUserMail0Model interface {
		Insert(ctx context.Context, session sqlx.Session, data *TUserMail0) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TUserMail0, error)
		FindOneByMailDeletionTime(ctx context.Context, mail string, deletionTime int64) (*TUserMail0, error)
		Update(ctx context.Context, data *TUserMail0) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTUserMail0Model struct {
		sqlc.CachedConn
		table string
	}

	TUserMail0 struct {
		Id           int64     `db:"id"`            // ID
		Username     string    `db:"username"`      // 用户名
		Mail         string    `db:"mail"`          // 邮箱
		DeletionTime int64     `db:"deletion_time"` // 注销时间戳
		CreateTime   time.Time `db:"create_time"`   // 创建时间
		UpdateTime   time.Time `db:"update_time"`   // 修改时间
		DelFlag      int64     `db:"del_flag"`      // 删除标识
	}
)

func newTUserMail0Model(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTUserMail0Model {
	return &defaultTUserMail0Model{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`t_user_mail_0`",
	}
}

func (m *defaultTUserMail0Model) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	_12306User0TUserMail0IdKey := fmt.Sprintf("%s%v", cache12306User0TUserMail0IdPrefix, id)
	_12306User0TUserMail0MailDeletionTimeKey := fmt.Sprintf("%s%v:%v", cache12306User0TUserMail0MailDeletionTimePrefix, data.Mail, data.DeletionTime)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, _12306User0TUserMail0IdKey, _12306User0TUserMail0MailDeletionTimeKey)
	return err
}

func (m *defaultTUserMail0Model) FindOne(ctx context.Context, id int64) (*TUserMail0, error) {
	_12306User0TUserMail0IdKey := fmt.Sprintf("%s%v", cache12306User0TUserMail0IdPrefix, id)
	var resp TUserMail0
	err := m.QueryRowCtx(ctx, &resp, _12306User0TUserMail0IdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tUserMail0Rows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlc.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTUserMail0Model) FindOneByMailDeletionTime(ctx context.Context, mail string, deletionTime int64) (*TUserMail0, error) {
	_12306User0TUserMail0MailDeletionTimeKey := fmt.Sprintf("%s%v:%v", cache12306User0TUserMail0MailDeletionTimePrefix, mail, deletionTime)
	var resp TUserMail0
	err := m.QueryRowIndexCtx(ctx, &resp, _12306User0TUserMail0MailDeletionTimeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `mail` = ? and `deletion_time` = ? limit 1", tUserMail0Rows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, mail, deletionTime); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlc.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTUserMail0Model) Insert(ctx context.Context, session sqlx.Session, data *TUserMail0) (sql.Result, error) {
	_12306User0TUserMail0IdKey := fmt.Sprintf("%s%v", cache12306User0TUserMail0IdPrefix, data.Id)
	_12306User0TUserMail0MailDeletionTimeKey := fmt.Sprintf("%s%v:%v", cache12306User0TUserMail0MailDeletionTimePrefix, data.Mail, data.DeletionTime)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, tUserMail0RowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Username, data.Mail, data.DeletionTime, data.DelFlag)
		}
		return conn.ExecCtx(ctx, query, data.Username, data.Mail, data.DeletionTime, data.DelFlag)
	}, _12306User0TUserMail0IdKey, _12306User0TUserMail0MailDeletionTimeKey)
	return ret, err
}

func (m *defaultTUserMail0Model) Update(ctx context.Context, newData *TUserMail0) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	_12306User0TUserMail0IdKey := fmt.Sprintf("%s%v", cache12306User0TUserMail0IdPrefix, data.Id)
	_12306User0TUserMail0MailDeletionTimeKey := fmt.Sprintf("%s%v:%v", cache12306User0TUserMail0MailDeletionTimePrefix, data.Mail, data.DeletionTime)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tUserMail0RowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Username, newData.Mail, newData.DeletionTime, newData.DelFlag, newData.Id)
	}, _12306User0TUserMail0IdKey, _12306User0TUserMail0MailDeletionTimeKey)
	return err
}

func (m *defaultTUserMail0Model) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cache12306User0TUserMail0IdPrefix, primary)
}

func (m *defaultTUserMail0Model) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tUserMail0Rows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTUserMail0Model) tableName() string {
	return m.table
}
