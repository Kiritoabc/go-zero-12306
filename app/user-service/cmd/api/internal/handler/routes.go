// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	passenger "go-zero-12306/app/user-service/cmd/api/internal/handler/passenger"
	userInfo "go-zero-12306/app/user-service/cmd/api/internal/handler/userInfo"
	userLogin "go-zero-12306/app/user-service/cmd/api/internal/handler/userLogin"
	"go-zero-12306/app/user-service/cmd/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/v1/login",
				Handler: userLogin.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/check-login",
				Handler: userLogin.CheckLoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/user-service"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/logout",
				Handler: userLogin.LogoutHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/user-service"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/query",
				Handler: userInfo.QueryUserByUsernameHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/actual/query",
				Handler: userInfo.QueryActualUserByUsernameHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/has-username",
				Handler: userInfo.HasUsernameHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: userInfo.UpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/deletion",
				Handler: userInfo.DeletionHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/user-service"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/v1/register",
				Handler: userInfo.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/user-service"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/passenger/query",
				Handler: passenger.ListPassengerQueryByUsernameHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/inner/passenger/actual/query/ids",
				Handler: passenger.ListPassengerQueryByIdsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/passenger/save",
				Handler: passenger.SavePassengerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/passenger/update",
				Handler: passenger.UpdatePassengerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/passenger/remove",
				Handler: passenger.RemovePassengerHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/user-service"),
	)
}
