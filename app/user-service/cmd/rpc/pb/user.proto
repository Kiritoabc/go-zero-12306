syntax = "proto3";

option go_package = "./pb";

package pb;

// model



// req,resp
message RegisterReq {
    string userName = 1;
    string password = 2;
    string realName = 3;
    int64 idType = 4;
    string idCard = 5;
    string phone = 6;
    string mail = 7;
    int64 userType = 8;
    int64 verifyState = 9;
    string postCode = 10;
    string address = 11;
    string region = 12;
    string telephone = 13;
}
message RegisterResp {
  string userName = 1;
  string realName =2;
  string phone = 3;
}

message LoginReq {
    string usernameOrMailOrPhone = 1;
    string password = 2;
}

message LoginResp {
     string userId = 1;
     string username = 2;
     string realName = 3;
     string accessToken = 4;
}
message GenerateTokenReq {
  int64 userId = 1;
}
message GenerateTokenResp {
  string accessToken = 1;
  int64  accessExpire = 2;
  int64  refreshAfter = 3;
}
message CheckLoginReq {
  string accessToken = 1;
}
message LogoutReq {
  string accessToken = 1;
}
message voidResp {
}
message hasUsernameReq {
  string username = 1;
}
message hasUsernameResp {
  bool has = 1;
}

message UserNameReq{
  string username = 1;
}
message UserNameResp {
  string username = 1;
  string realName = 2;
  string region = 3;
  int64 idType = 4;
  string idCard = 5;
   string phone = 6;
   string telephone = 7;
   string mail = 8;
   int64 userType = 9;
   int64 verifyStatus=10;
   string postCode = 11;
   string address = 12;
}

message ActualUserNameResp {
   string username = 1;
   string realName = 2;
   string region = 3;
   int64 idType = 4;
   string idCard = 5;
   string phone =6;
   string telephone = 7;
   string mail =8;
   int64 userType =9;
   int64 verifyStatus =10;
   string postCode =11;
   string address =12;
}
message UpdateUserInfoReq {
  string id = 1;
  string username = 2;
  string mail = 3;
  int64 userType = 4;
  string postCode =5;
  string address =6;
}

message UpdateUserInfoResp {
}


// service
service  user {
    rpc register(RegisterReq) returns (RegisterResp);
    rpc hasUsername(hasUsernameReq) returns (hasUsernameResp);
    rpc queryUserByUsername(UserNameReq) returns (UserNameResp);
    rpc queryActualUserByUsername(UserNameReq) returns (ActualUserNameResp);
    rpc updateUserInfo(UpdateUserInfoReq) returns (UpdateUserInfoResp);
    rpc login(LoginReq) returns (LoginResp);
    rpc generateToken(GenerateTokenReq) returns(GenerateTokenResp);
    rpc checkLogin(CheckLoginReq) returns (LoginResp);
    rpc logout(LogoutReq) returns (voidResp);
}