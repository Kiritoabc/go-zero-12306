// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_Register_FullMethodName                     = "/pb.user/register"
	User_HasUsername_FullMethodName                  = "/pb.user/hasUsername"
	User_QueryUserByUsername_FullMethodName          = "/pb.user/queryUserByUsername"
	User_QueryActualUserByUsername_FullMethodName    = "/pb.user/queryActualUserByUsername"
	User_UpdateUserInfo_FullMethodName               = "/pb.user/updateUserInfo"
	User_Deletion_FullMethodName                     = "/pb.user/deletion"
	User_Login_FullMethodName                        = "/pb.user/login"
	User_GenerateToken_FullMethodName                = "/pb.user/generateToken"
	User_CheckLogin_FullMethodName                   = "/pb.user/checkLogin"
	User_Logout_FullMethodName                       = "/pb.user/logout"
	User_ListPassengerQueryByUsername_FullMethodName = "/pb.user/listPassengerQueryByUsername"
	User_ListPassengerQueryByIds_FullMethodName      = "/pb.user/listPassengerQueryByIds"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	HasUsername(ctx context.Context, in *HasUsernameReq, opts ...grpc.CallOption) (*HasUsernameResp, error)
	QueryUserByUsername(ctx context.Context, in *UserNameReq, opts ...grpc.CallOption) (*UserNameResp, error)
	QueryActualUserByUsername(ctx context.Context, in *UserNameReq, opts ...grpc.CallOption) (*ActualUserNameResp, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
	Deletion(ctx context.Context, in *DeletionReq, opts ...grpc.CallOption) (*DeletionResp, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
	// rpc parseToken(ParseTokenReq) returns(ParseTokenResp);
	CheckLogin(ctx context.Context, in *CheckLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*VoidResp, error)
	ListPassengerQueryByUsername(ctx context.Context, in *ListPassengerQueryByUsernameReq, opts ...grpc.CallOption) (*ListPassengerQueryByUsernameResp, error)
	ListPassengerQueryByIds(ctx context.Context, in *ListPassengerQueryByIdsReq, opts ...grpc.CallOption) (*ListPassengerQueryByIdsResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, User_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) HasUsername(ctx context.Context, in *HasUsernameReq, opts ...grpc.CallOption) (*HasUsernameResp, error) {
	out := new(HasUsernameResp)
	err := c.cc.Invoke(ctx, User_HasUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryUserByUsername(ctx context.Context, in *UserNameReq, opts ...grpc.CallOption) (*UserNameResp, error) {
	out := new(UserNameResp)
	err := c.cc.Invoke(ctx, User_QueryUserByUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QueryActualUserByUsername(ctx context.Context, in *UserNameReq, opts ...grpc.CallOption) (*ActualUserNameResp, error) {
	out := new(ActualUserNameResp)
	err := c.cc.Invoke(ctx, User_QueryActualUserByUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	out := new(UpdateUserInfoResp)
	err := c.cc.Invoke(ctx, User_UpdateUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Deletion(ctx context.Context, in *DeletionReq, opts ...grpc.CallOption) (*DeletionResp, error) {
	out := new(DeletionResp)
	err := c.cc.Invoke(ctx, User_Deletion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, User_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	out := new(GenerateTokenResp)
	err := c.cc.Invoke(ctx, User_GenerateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckLogin(ctx context.Context, in *CheckLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, User_CheckLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*VoidResp, error) {
	out := new(VoidResp)
	err := c.cc.Invoke(ctx, User_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListPassengerQueryByUsername(ctx context.Context, in *ListPassengerQueryByUsernameReq, opts ...grpc.CallOption) (*ListPassengerQueryByUsernameResp, error) {
	out := new(ListPassengerQueryByUsernameResp)
	err := c.cc.Invoke(ctx, User_ListPassengerQueryByUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListPassengerQueryByIds(ctx context.Context, in *ListPassengerQueryByIdsReq, opts ...grpc.CallOption) (*ListPassengerQueryByIdsResp, error) {
	out := new(ListPassengerQueryByIdsResp)
	err := c.cc.Invoke(ctx, User_ListPassengerQueryByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	HasUsername(context.Context, *HasUsernameReq) (*HasUsernameResp, error)
	QueryUserByUsername(context.Context, *UserNameReq) (*UserNameResp, error)
	QueryActualUserByUsername(context.Context, *UserNameReq) (*ActualUserNameResp, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	Deletion(context.Context, *DeletionReq) (*DeletionResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	GenerateToken(context.Context, *GenerateTokenReq) (*GenerateTokenResp, error)
	// rpc parseToken(ParseTokenReq) returns(ParseTokenResp);
	CheckLogin(context.Context, *CheckLoginReq) (*LoginResp, error)
	Logout(context.Context, *LogoutReq) (*VoidResp, error)
	ListPassengerQueryByUsername(context.Context, *ListPassengerQueryByUsernameReq) (*ListPassengerQueryByUsernameResp, error)
	ListPassengerQueryByIds(context.Context, *ListPassengerQueryByIdsReq) (*ListPassengerQueryByIdsResp, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServer) HasUsername(context.Context, *HasUsernameReq) (*HasUsernameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasUsername not implemented")
}
func (UnimplementedUserServer) QueryUserByUsername(context.Context, *UserNameReq) (*UserNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserByUsername not implemented")
}
func (UnimplementedUserServer) QueryActualUserByUsername(context.Context, *UserNameReq) (*ActualUserNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryActualUserByUsername not implemented")
}
func (UnimplementedUserServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserServer) Deletion(context.Context, *DeletionReq) (*DeletionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deletion not implemented")
}
func (UnimplementedUserServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) GenerateToken(context.Context, *GenerateTokenReq) (*GenerateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedUserServer) CheckLogin(context.Context, *CheckLoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLogin not implemented")
}
func (UnimplementedUserServer) Logout(context.Context, *LogoutReq) (*VoidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUserServer) ListPassengerQueryByUsername(context.Context, *ListPassengerQueryByUsernameReq) (*ListPassengerQueryByUsernameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPassengerQueryByUsername not implemented")
}
func (UnimplementedUserServer) ListPassengerQueryByIds(context.Context, *ListPassengerQueryByIdsReq) (*ListPassengerQueryByIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPassengerQueryByIds not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_HasUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).HasUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_HasUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).HasUsername(ctx, req.(*HasUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_QueryUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QueryUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_QueryUserByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QueryUserByUsername(ctx, req.(*UserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_QueryActualUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QueryActualUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_QueryActualUserByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QueryActualUserByUsername(ctx, req.(*UserNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Deletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Deletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Deletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Deletion(ctx, req.(*DeletionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GenerateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GenerateToken(ctx, req.(*GenerateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CheckLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckLogin(ctx, req.(*CheckLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListPassengerQueryByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPassengerQueryByUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListPassengerQueryByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ListPassengerQueryByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListPassengerQueryByUsername(ctx, req.(*ListPassengerQueryByUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListPassengerQueryByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPassengerQueryByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListPassengerQueryByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ListPassengerQueryByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListPassengerQueryByIds(ctx, req.(*ListPassengerQueryByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register",
			Handler:    _User_Register_Handler,
		},
		{
			MethodName: "hasUsername",
			Handler:    _User_HasUsername_Handler,
		},
		{
			MethodName: "queryUserByUsername",
			Handler:    _User_QueryUserByUsername_Handler,
		},
		{
			MethodName: "queryActualUserByUsername",
			Handler:    _User_QueryActualUserByUsername_Handler,
		},
		{
			MethodName: "updateUserInfo",
			Handler:    _User_UpdateUserInfo_Handler,
		},
		{
			MethodName: "deletion",
			Handler:    _User_Deletion_Handler,
		},
		{
			MethodName: "login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "generateToken",
			Handler:    _User_GenerateToken_Handler,
		},
		{
			MethodName: "checkLogin",
			Handler:    _User_CheckLogin_Handler,
		},
		{
			MethodName: "logout",
			Handler:    _User_Logout_Handler,
		},
		{
			MethodName: "listPassengerQueryByUsername",
			Handler:    _User_ListPassengerQueryByUsername_Handler,
		},
		{
			MethodName: "listPassengerQueryByIds",
			Handler:    _User_ListPassengerQueryByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
