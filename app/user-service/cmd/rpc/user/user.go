// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package user

import (
	"context"

	"go-zero-12306/app/user-service/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ActualUserNameResp = pb.ActualUserNameResp
	CheckLoginReq      = pb.CheckLoginReq
	GenerateTokenReq   = pb.GenerateTokenReq
	GenerateTokenResp  = pb.GenerateTokenResp
	HasUsernameReq     = pb.HasUsernameReq
	HasUsernameResp    = pb.HasUsernameResp
	LoginReq           = pb.LoginReq
	LoginResp          = pb.LoginResp
	LogoutReq          = pb.LogoutReq
	RegisterReq        = pb.RegisterReq
	RegisterResp       = pb.RegisterResp
	UpdateUserInfoReq  = pb.UpdateUserInfoReq
	UpdateUserInfoResp = pb.UpdateUserInfoResp
	UserNameReq        = pb.UserNameReq
	UserNameResp       = pb.UserNameResp
	VoidResp           = pb.VoidResp

	User interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		HasUsername(ctx context.Context, in *HasUsernameReq, opts ...grpc.CallOption) (*HasUsernameResp, error)
		QueryUserByUsername(ctx context.Context, in *UserNameReq, opts ...grpc.CallOption) (*UserNameResp, error)
		QueryActualUserByUsername(ctx context.Context, in *UserNameReq, opts ...grpc.CallOption) (*ActualUserNameResp, error)
		UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
		CheckLogin(ctx context.Context, in *CheckLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*VoidResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) HasUsername(ctx context.Context, in *HasUsernameReq, opts ...grpc.CallOption) (*HasUsernameResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.HasUsername(ctx, in, opts...)
}

func (m *defaultUser) QueryUserByUsername(ctx context.Context, in *UserNameReq, opts ...grpc.CallOption) (*UserNameResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.QueryUserByUsername(ctx, in, opts...)
}

func (m *defaultUser) QueryActualUserByUsername(ctx context.Context, in *UserNameReq, opts ...grpc.CallOption) (*ActualUserNameResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.QueryActualUserByUsername(ctx, in, opts...)
}

func (m *defaultUser) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateUserInfo(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

func (m *defaultUser) CheckLogin(ctx context.Context, in *CheckLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.CheckLogin(ctx, in, opts...)
}

func (m *defaultUser) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*VoidResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}
